Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Code : 
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0)
            return res;
        
        Arrays.sort(nums);
        
        for(int i = 0 ; i < nums.length; i++){
            for(int j = i+1;j<nums.length ; j++){
                int temp = target - nums[i] - nums[j];
                int front = j+1;
                int back = nums.length-1;
                while(front < back){
                    int twoSum = nums[front] + nums[back];
                    if(twoSum < temp)   front++;
                    else if(twoSum > temp) back--;
                    else{
                        List<Integer> quad = new ArrayList();
                        quad.add(nums[i]);
                        quad.add(nums[j]);
                        quad.add(nums[front]);
                        quad.add(nums[back]);
                        res.add(quad);
                        
                        while(front < back && nums[front] == quad.get(2)) ++front;
                        
                        while(front < back && nums[back] == quad.get(3)) --back;
                    }
                }
                while(j+1 < nums.length && nums[j+1] == nums[j]) ++j;
            }
            while(i+1 < nums.length && nums[i+1] == nums[i]) ++i;
        }
        return res;
    }
}
